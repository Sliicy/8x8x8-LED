using _8x8x8_LED.Helpers;
using _8x8x8_LED.Model;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO.Ports;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace _8x8x8_LED
{
    public partial class Testing : Form
    {
        public Testing(SerialPort serialPort)
        {
            InitializeComponent();
            this.serialPort = serialPort;
        }

        private readonly SerialPort serialPort;
        int amount = 16;
        private void BtnRed_Click(object sender, EventArgs e)
        {
            byte[] bytesToSend1 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                (byte)nudDepth.Value,
                (byte)nudZ.Value,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
            };
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend1, false);
            System.Threading.Thread.Sleep(amount);
        }

        private void BtnClear_Click(object sender, EventArgs e)
        {
            byte[] bytesToSend1 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                (byte)nudDepth.Value,
                0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            };
            byte[] bytesToSend2 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                (byte)nudDepth.Value,
                0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            };
            byte[] bytesToSend3 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                (byte)nudDepth.Value,
                0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            };
            byte[] bytesToSend4 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                (byte)nudDepth.Value,
                0x06,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            };
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend1, false);
            System.Threading.Thread.Sleep(amount);
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend2, false);
            System.Threading.Thread.Sleep(amount);
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend3, false);
            System.Threading.Thread.Sleep(amount);
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend4, false);
            System.Threading.Thread.Sleep(amount);
        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            timer1.Enabled = checkBox1.Checked;
        }

        private void trackBar1_Scroll(object sender, EventArgs e)
        {
            timer1.Interval = trackBar1.Value;
        }

        bool red = false;
        private void timer1_Tick(object sender, EventArgs e)
        {
            if (red)
            {
                byte[] bytesToSend1 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x00,
                0x00,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
            };
                byte[] bytesToSend2 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x00,
                0x02,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
            };
                byte[] bytesToSend3 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x00,
                0x04,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
            };
                byte[] bytesToSend4 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x00,
                0x06,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
            };
                byte[] bytesToSend5 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x01,
                0x00,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
            };
                byte[] bytesToSend6 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x01,
                0x02,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
            };
                byte[] bytesToSend7 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x01,
                0x04,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
            };
                byte[] bytesToSend8 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x01,
                0x06,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
            };
                int amount = 16;
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend1, false);
                System.Threading.Thread.Sleep(amount);
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend2, false);
                System.Threading.Thread.Sleep(amount);
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend3, false);
                System.Threading.Thread.Sleep(amount);
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend4, false);
                System.Threading.Thread.Sleep(amount);
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend5, false);
                System.Threading.Thread.Sleep(amount);
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend6, false);
                System.Threading.Thread.Sleep(amount);
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend7, false);
                System.Threading.Thread.Sleep(amount);
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend8, false);
                System.Threading.Thread.Sleep(amount);
            }
            else
            {
                byte[] bytesToSend1 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x00,
                0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
            };
                byte[] bytesToSend2 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x00,
                0x02,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
            };
                byte[] bytesToSend3 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x00,
                0x04,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
            };
                byte[] bytesToSend4 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x00,
                0x06,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
            };
                byte[] bytesToSend5 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x01,
                0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
            };
                byte[] bytesToSend6 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x01,
                0x02,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
            };
                byte[] bytesToSend7 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x01,
                0x04,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
            };
                byte[] bytesToSend8 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x01,
                0x06,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
            };
                int amount = 16;
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend8, false);
                System.Threading.Thread.Sleep(amount);
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend7, false);
                System.Threading.Thread.Sleep(amount);
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend6, false);
                System.Threading.Thread.Sleep(amount);
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend5, false);
                System.Threading.Thread.Sleep(amount);
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend4, false);
                System.Threading.Thread.Sleep(amount);
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend3, false);
                System.Threading.Thread.Sleep(amount);
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend2, false);
                System.Threading.Thread.Sleep(amount);
                SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend1, false);
                System.Threading.Thread.Sleep(amount);
            }
            red = !red;
        }

        private void BtnGreen_Click(object sender, EventArgs e)
        {
            byte[] bytesToSend1 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                (byte)nudDepth.Value,
                (byte)nudZ.Value,
                0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
                0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
            };
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend1, false);
            System.Threading.Thread.Sleep(amount);

        }

        private void BtnBlue_Click(object sender, EventArgs e)
        {
            byte[] bytesToSend1 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                (byte)nudDepth.Value,
                (byte)nudZ.Value,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
            };
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend1, false);
            System.Threading.Thread.Sleep(amount);
        }

        private void btnYellow_Click(object sender, EventArgs e)
        {
            byte[] bytesToSend1 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                (byte)nudDepth.Value,
                (byte)nudZ.Value,
                0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
                0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
            };
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend1, false);
            System.Threading.Thread.Sleep(amount);
        }

        private void btnCyan_Click(object sender, EventArgs e)
        {
            byte[] bytesToSend1 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                (byte)nudDepth.Value,
                (byte)nudZ.Value,
                0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
                0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
            };
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend1, false);
            System.Threading.Thread.Sleep(amount);
        }

        private void btnMagenta_Click(object sender, EventArgs e)
        {
            byte[] bytesToSend1 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                (byte)nudDepth.Value,
                (byte)nudZ.Value,
                0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
                0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
            };
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend1, false);
            System.Threading.Thread.Sleep(amount);
        }
        
        private void btnWhite_Click(object sender, EventArgs e)
        {
            byte[] bytesToSend1 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                (byte)nudDepth.Value,
                (byte)nudZ.Value,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            };
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend1, false);
            System.Threading.Thread.Sleep(amount);
        }

        private void button1_Click(object sender, EventArgs e)
        {
            nudDepth.Value = 0;
            button1.Enabled = false;
            button2.Enabled = true;
        }

        private void button2_Click(object sender, EventArgs e)
        {
            nudDepth.Value = 1;
            button1.Enabled = true;
            button2.Enabled = false;
        }

        private void BtnSunset_Click(object sender, EventArgs e)
        {
            
        }

        private void btnSmileyFace_Click(object sender, EventArgs e)
        {
            byte[] bytesToSend4 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x00,
                0x06,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             // G  G  B  B  R  R
                4+8+16+32, 2+4+32+64, 0, 0, 4+8+16+32, 2+4+8+16+32+64,
                2+64, 255, 0, 0, 2+4+8+16+32+64, 255,
                1+2+8+16+64+128, 1+2+8+16+64+128, 4+32, 4+32, 1+2+8+16+64+128, 1+2+8+16+64+128,
                2+4+8+16+32+64, 4+8+16+32, 0, 0, 2+4+8+16+32+64, 4+8+16+32,
            };
            
            byte[] bytesToSend8 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x01,
                0x06,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             // G  G  B  B  R  R
                0, 0, 0, 0, 4+8+16+32, 2+4+8+16+32+64,
                0, 0, 0, 0, 2+4+8+16+32+64, 255,
                4+32, 4+32, 0, 0, 1+2+8+16+64+128, 1+2+8+16+64+128,
                0, 0, 0, 0, 2+4+8+16+32+64, 4+8+16+32,
            };
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend4, false);
            System.Threading.Thread.Sleep(amount);
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend8, false);
            System.Threading.Thread.Sleep(amount);
        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            byte[] bytesToSend4 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x00,
                0x06,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             // G1 G2 B1 B2 R1 R2
                (byte)(trackBar3.Value == 0 ? 255 : 0), (byte)(trackBar3.Value == 1 ? 255 : 0), 0, 0, (byte)ColorMapper.RaiseNumber(trackBar2.Value), (byte)ColorMapper.RaiseNumber(trackBar2.Value),
                (byte)(trackBar3.Value == 2 ? 255 : 0), (byte)(trackBar3.Value == 3 ? 255 : 0), 0, 0, (byte)ColorMapper.RaiseNumber(trackBar2.Value), (byte)ColorMapper.RaiseNumber(trackBar2.Value),
                (byte)(trackBar3.Value == 4 ? 255 : 0), (byte)(trackBar3.Value == 5 ? 255 : 0), 0, 0, (byte)ColorMapper.RaiseNumber(trackBar2.Value), (byte)ColorMapper.RaiseNumber(trackBar2.Value),
                (byte)(trackBar3.Value == 6 ? 255 : 0), (byte)(trackBar3.Value == 7 ? 255 : 0), 0, 0, (byte)ColorMapper.RaiseNumber(trackBar2.Value), (byte)ColorMapper.RaiseNumber(trackBar2.Value),
            };

            byte[] bytesToSend8 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x01,
                0x06,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             // G  G  B  B  R  R
                0, 0, 128, 64, 0, 0,
                0, 0, 32, 16, 0, 0,
                0, 0, 8, 4, 0, 0,
                0, 0, 2, 1, 0, 0,
            };
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend4, false);
            System.Threading.Thread.Sleep(amount);
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend8, false);
            System.Threading.Thread.Sleep(amount);
            bytesToSend4[5] = 4;
            bytesToSend8[5] = 4;
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend4, false);
            System.Threading.Thread.Sleep(amount);
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend8, false);
            System.Threading.Thread.Sleep(amount);
            bytesToSend4[5] = 2;
            bytesToSend8[5] = 2;
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend4, false);
            System.Threading.Thread.Sleep(amount);
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend8, false);
            System.Threading.Thread.Sleep(amount);
            bytesToSend4[5] = 0;
            bytesToSend8[5] = 0;
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend4, false);
            System.Threading.Thread.Sleep(amount);
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend8, false);
            System.Threading.Thread.Sleep(amount);
            timer2.Stop();
        }

        private void trackBar2_Scroll(object sender, EventArgs e)
        {
            //timer2.Start();
            value1 = trackBar2.Value;
            if (!backgroundWorker1.IsBusy)
                backgroundWorker1.RunWorkerAsync();
        }

        private void trackBar3_Scroll(object sender, EventArgs e)
        {
            //timer2.Start();
            value2 = trackBar3.Value;
            if (!backgroundWorker1.IsBusy)
                backgroundWorker1.RunWorkerAsync();
        }
        int value1 = 0;
        int value2 = 0;
        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {
            byte[] bytesToSend4 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x00,
                0x06,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             // G1 G2 B1 B2 R1 R2
                (byte)(value2 == 0 ? 255 : 0), (byte)(value2 == 1 ? 255 : 0), 0, 0, (byte)ColorMapper.RaiseNumber(value1), (byte)ColorMapper.RaiseNumber(value1),
                (byte)(value2 == 2 ? 255 : 0), (byte)(value2 == 3 ? 255 : 0), 0, 0, (byte)ColorMapper.RaiseNumber(value1), (byte)ColorMapper.RaiseNumber(value1),
                (byte)(value2 == 4 ? 255 : 0), (byte)(value2 == 5 ? 255 : 0), 0, 0, (byte)ColorMapper.RaiseNumber(value1), (byte)ColorMapper.RaiseNumber(value1),
                (byte)(value2 == 6 ? 255 : 0), (byte)(value2 == 7 ? 255 : 0), 0, 0, (byte)ColorMapper.RaiseNumber(value1), (byte)ColorMapper.RaiseNumber(value1),
            };

            byte[] bytesToSend8 = new byte[] {
                0x00, 0xFF, 0x00, 0x00,
                0x01,
                0x06,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             // G  G  B  B  R  R
                0, 0, 128, 64, 0, 0,
                0, 0, 32, 16, 0, 0,
                0, 0, 8, 4, 0, 0,
                0, 0, 2, 1, 0, 0,
            };
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend4, false);
            System.Threading.Thread.Sleep(amount);
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend8, false);
            System.Threading.Thread.Sleep(amount);
            bytesToSend4[5] = 4;
            bytesToSend8[5] = 4;
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend4, false);
            System.Threading.Thread.Sleep(amount);
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend8, false);
            System.Threading.Thread.Sleep(amount);
            bytesToSend4[5] = 2;
            bytesToSend8[5] = 2;
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend4, false);
            System.Threading.Thread.Sleep(amount);
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend8, false);
            System.Threading.Thread.Sleep(amount);
            bytesToSend4[5] = 0;
            bytesToSend8[5] = 0;
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend4, false);
            System.Threading.Thread.Sleep(amount);
            SerialHelper.SendPacket(CubeType.RGB, serialPort, bytesToSend8, false);
            System.Threading.Thread.Sleep(amount);
        }

        private void button3_Click(object sender, EventArgs e)
        {
            button3.Enabled = true;
            button4.Enabled = true;
            button5.Enabled = true;
            button6.Enabled = true;
            nudZ.Value = 0;
            button3.Enabled = false;
        }

        private void button4_Click(object sender, EventArgs e)
        {
            button3.Enabled = true;
            button4.Enabled = true;
            button5.Enabled = true;
            button6.Enabled = true;
            nudZ.Value = 2;
            button4.Enabled = false;
        }

        private void button5_Click(object sender, EventArgs e)
        {
            button3.Enabled = true;
            button4.Enabled = true;
            button5.Enabled = true;
            button6.Enabled = true;
            nudZ.Value = 4;
            button5.Enabled = false;
        }

        private void button6_Click(object sender, EventArgs e)
        {
            button3.Enabled = true;
            button4.Enabled = true;
            button5.Enabled = true;
            button6.Enabled = true;
            nudZ.Value = 6;
            button6.Enabled = false;
        }

        private void btnMock_Click(object sender, EventArgs e)
        {
            var c = new CubeColor[8, 8, 8];
            c[7, 7, 7] = CubeColor.DarkRed;
            c[6, 6, 6] = CubeColor.Red;
            c[0, 0, 7] = CubeColor.Gray;
            c[1, 0, 0] = CubeColor.Blue;
            c[2, 0, 0] = CubeColor.BrightBlue;
            c[3, 0, 0] = CubeColor.DarkBlue;

            c[4, 0, 0] = CubeColor.Green;
            c[5, 0, 0] = CubeColor.BrightGreen;
            c[6, 0, 0] = CubeColor.DarkGreen;
            
            c[7, 0, 0] = CubeColor.Cyan;
            c[0, 1, 0] = CubeColor.BrightCyan;
            c[0, 2, 0] = CubeColor.DarkCyan;
            c[0, 3, 0] = CubeColor.Magenta;
            c[0, 4, 0] = CubeColor.BrightMagenta;
            c[0, 5, 0] = CubeColor.DarkMagenta;
            c[0, 6, 0] = CubeColor.Yellow;
            c[0, 7, 0] = CubeColor.BrightYellow;
            c[0, 0, 1] = CubeColor.DarkYellow;



            var output = ColorMapper.MatrixToBytes(c);

            byte[] header = {0, 255, 0, 0};
            byte[] colorDepth = { 0 };
            byte[] z_axis = { 0 };

            var cube1 = output.Take(48).ToArray();
            var cube2 = output.Skip(48).Take(48).ToArray();
            var cube3 = output.Skip(48 * 2).Take(48).ToArray();
            var cube4 = output.Skip(48 * 3).Take(48).ToArray();
            var cube5 = output.Skip(48 * 4).Take(48).ToArray();
            var cube6 = output.Skip(48 * 5).Take(48).ToArray();
            var cube7 = output.Skip(48 * 6).Take(48).ToArray();
            var cube8 = output.Skip(48 * 7).Take(48).ToArray();

            SerialHelper.SendPacket(CubeType.RGB, serialPort, header.Concat(colorDepth).Concat(z_axis).Concat(cube1).ToArray(), false);
            System.Threading.Thread.Sleep(amount);
            z_axis[0] = 2;
            SerialHelper.SendPacket(CubeType.RGB, serialPort, header.Concat(colorDepth).Concat(z_axis).Concat(cube2).ToArray(), false);
            System.Threading.Thread.Sleep(amount);
            z_axis[0] = 4;
            SerialHelper.SendPacket(CubeType.RGB, serialPort, header.Concat(colorDepth).Concat(z_axis).Concat(cube3).ToArray(), false);
            System.Threading.Thread.Sleep(amount);
            z_axis[0] = 6;
            SerialHelper.SendPacket(CubeType.RGB, serialPort, header.Concat(colorDepth).Concat(z_axis).Concat(cube4).ToArray(), false);
            System.Threading.Thread.Sleep(amount);

            colorDepth[0] = 1;
            z_axis[0] = 0;
            SerialHelper.SendPacket(CubeType.RGB, serialPort, header.Concat(colorDepth).Concat(z_axis).Concat(cube5).ToArray(), false);
            System.Threading.Thread.Sleep(amount);
            z_axis[0] = 2;
            SerialHelper.SendPacket(CubeType.RGB, serialPort, header.Concat(colorDepth).Concat(z_axis).Concat(cube6).ToArray(), false);
            System.Threading.Thread.Sleep(amount);
            z_axis[0] = 4;
            SerialHelper.SendPacket(CubeType.RGB, serialPort, header.Concat(colorDepth).Concat(z_axis).Concat(cube7).ToArray(), false);
            System.Threading.Thread.Sleep(amount);
            z_axis[0] = 6;
            SerialHelper.SendPacket(CubeType.RGB, serialPort, header.Concat(colorDepth).Concat(z_axis).Concat(cube8).ToArray(), false);
            System.Threading.Thread.Sleep(amount);
        }
    }
}
